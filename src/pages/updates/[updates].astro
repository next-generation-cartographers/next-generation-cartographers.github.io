---
import { getCollection, render } from "astro:content";
import UpdatesList from "../../components/UpdatesList.astro";
import Layout from "../../layouts/Layout.astro";
import Link from "../../components/Link.astro";
import { getEntries } from "astro:content";
import Time from "../../components/Time.astro";

export async function getStaticPaths() {
  const updates = await getCollection("updates");
  return updates.map((updates) => ({
    params: { updates: updates.id.replace("updates/", "") },
    props: { updates },
  }));
}

const { updates } = Astro.props;
const { Content } = await render(updates);
const updatesCollection = await getCollection("updates");
const relatedPapers = await getEntries(updates.data.papers ?? []);
---

<Layout>
  <article>
    <header>
      <h2 id={updates.id}>{updates.data.title}</h2>
      <Time
        class="monospace"
        datetime={updates.data.date.toISOString()}
        format="date"
      />
    </header>

    <Content />

    {
      relatedPapers.length > 0 && (
        <div>
          <h3>Related Papers</h3>
          <ul>
            {relatedPapers?.map((paper) => (
              <li>
                <em>{paper.data.title}</em>
                <br />
                <Link href={`/resources/papers/${paper.id}`}>See details</Link>
              </li>
            ))}
          </ul>
        </div>
      )
    }

    <h3 class="more-updates">More updates</h3>
    <div class="feature">
      <UpdatesList
        updatesEntries={updatesCollection
          .toSorted((a, b) => {
            const aDate = new Date(a.data.date);
            const bDate = new Date(b.data.date);
            return bDate.getTime() - aDate.getTime();
          })
          .slice(0, 3)}
        showSummary={false}
      />
    </div>

    <style>
      header {
        margin-bottom: var(--spacing-lg);
      }
      .more-updates {
        margin-top: var(--spacing-lg);
      }
    </style>
  </article>
</Layout>
