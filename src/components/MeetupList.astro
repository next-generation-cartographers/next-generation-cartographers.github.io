---
import { getCollection } from "astro:content";
import Card from "./Card.astro";
import Link from "./Link.astro";
import Time from "./Time.astro";

interface Props {
  filter?: "upcoming" | "past" | "all";
}
const { filter } = Astro.props;

const meetUps = (
  await getCollection("events", (data) =>
    data.id.startsWith("online-community-meet-up")
  )
).toSorted((a, b) => {
  const aDate = new Date(a.data.dateTime?.start ?? "");
  const bDate = new Date(b.data.dateTime?.start ?? "");
  return bDate.getTime() - aDate.getTime();
});

const filteredMeetUps =
  filter === "upcoming"
    ? meetUps
        .filter(
          (event) => new Date(event.data.dateTime?.start ?? "") > new Date()
        )
        .toReversed()
    : filter === "past"
      ? meetUps.filter(
          (event) => new Date(event.data.dateTime?.start ?? "") < new Date()
        )
      : meetUps;
---

{
  filter === "upcoming" && filteredMeetUps.length === 0 && (
    <div class="empty-list">
      <p>
        No upcoming online community meet-ups are scheduled at the moment.
        Please check back later, new dates will be announced soon.
      </p>
    </div>
  )
}

<ul>
  {
    filteredMeetUps.map((event) => (
      <Card
        decoration={`"${event.data.index}"`}
        isInteractive={filter === "upcoming"}
      >
        <div class="card-content">
          <h3 id={event.id}>{event.data.title}</h3>
          {event.data.dateTime?.start ? (
            <Time datetime={event.data.dateTime?.start ?? ""} format="long" />
          ) : (
            "tba"
          )}
          {filter === "upcoming" && (
            <Link href={event.data.url ?? ""} external>
              Register
            </Link>
          )}
        </div>
      </Card>
    ))
  }
</ul>

<style>
  ul {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-xs);
    padding-left: 0;
  }
  h3 {
    margin: 0;
    font-size: 1.2em;
  }
  .card-content {
    display: flex;
    flex-direction: column;
    align-items: start;
    gap: var(--spacing-xs);
  }
  .empty-list {
    padding: var(--spacing);
    border: 1px dashed rgb(var(--primary));
    border-radius: var(--border-radius-sm);
  }
</style>
